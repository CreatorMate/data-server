generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id          String    @id @db.Uuid
  external_id String?   @db.VarChar
  email       String?   @db.VarChar
  brand_id    Int?
  full_name   String?   @db.VarChar
  picture     String?   @db.VarChar
  creators    creators?
  brands      brands?   @relation(fields: [brand_id], references: [id])
}

model brands {
  id                 Int                 @id @default(autoincrement())
  picture            String?
  name               String?             @db.VarChar
  is_premium         Boolean?
  customer_id        String?             @db.VarChar
  instagram_id       Int?                @unique
  instagram_accounts instagram_accounts? @relation(fields: [instagram_id], references: [id])
  creator_brand      creator_brand[]
  projects           projects[]
  users              users[]
  widgets            widgets[]
}

model columns {
  id              Int               @id @default(autoincrement())
  name            String
  project_id      Int
  position        Int?
  projects        projects          @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_widgets project_widgets[]
}

model creator_brand {
  id         String   @id @db.Uuid
  creator_id String   @db.Uuid
  brand_id   Int
  accepted   Boolean?
  brands     brands   @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  creators   creators @relation(fields: [creator_id], references: [id], onDelete: Cascade)
}

model creators {
  id                 String              @id @db.Uuid
  first_name         String?             @db.VarChar
  last_name          String?
  instagram_id       Int?                @unique
  user_id            String              @unique @db.Uuid
  status             String?
  handle             String?             @db.VarChar
  linked             Boolean?
  creator_brand      creator_brand[]
  instagram_accounts instagram_accounts? @relation(fields: [instagram_id], references: [id])
  users              users               @relation(fields: [user_id], references: [id])
}

model instagram_accounts {
  id           Int       @id @default(autoincrement())
  expires_at   DateTime
  token        String
  instagram_id String
  brands       brands?
  creators     creators?
}

model project_widgets {
  id         String  @id @db.Uuid
  widget_id  Int?
  project_id Int
  component  String?
  value      String?
  column_id  Int
  order      Int?
  columns    columns @relation(fields: [column_id], references: [id], onDelete: Cascade)
}

model projects {
  id          Int       @id @default(autoincrement())
  color       String?
  name        String?
  creators    String?
  days        String?
  slug        String?
  description String?
  brand_id    Int?
  columns     columns[]
  brands      brands?   @relation(fields: [brand_id], references: [id], onDelete: Cascade)
}

model widgets {
  id          Int      @id @default(autoincrement())
  top         String?
  grouped     Boolean?
  name        String?
  description String?
  brand_id    Int?
  component   String?
  action      String?
  endpoint    String?
  metric_name String?
  brands      brands?  @relation(fields: [brand_id], references: [id], onDelete: Cascade)
}
